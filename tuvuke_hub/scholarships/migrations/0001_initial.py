# Generated by Django 5.2.4 on 2025-08-31 09:32

import django.core.validators
import django.db.models.deletion
import uuid
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="County",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        choices=[
                            ("baringo", "Baringo"),
                            ("bomet", "Bomet"),
                            ("bungoma", "Bungoma"),
                            ("busia", "Busia"),
                            ("elgeyo_marakwet", "Elgeyo Marakwet"),
                            ("embu", "Embu"),
                            ("garissa", "Garissa"),
                            ("homa_bay", "Homa Bay"),
                            ("isiolo", "Isiolo"),
                            ("kajiado", "Kajiado"),
                            ("kakamega", "Kakamega"),
                            ("kericho", "Kericho"),
                            ("kiambu", "Kiambu"),
                            ("kilifi", "Kilifi"),
                            ("kirinyaga", "Kirinyaga"),
                            ("kisii", "Kisii"),
                            ("kisumu", "Kisumu"),
                            ("kitui", "Kitui"),
                            ("kwale", "Kwale"),
                            ("laikipia", "Laikipia"),
                            ("lamu", "Lamu"),
                            ("machakos", "Machakos"),
                            ("makueni", "Makueni"),
                            ("mandera", "Mandera"),
                            ("marsabit", "Marsabit"),
                            ("meru", "Meru"),
                            ("migori", "Migori"),
                            ("mombasa", "Mombasa"),
                            ("murang'a", "Murang'a"),
                            ("nairobi", "Nairobi"),
                            ("nakuru", "Nakuru"),
                            ("nandi", "Nandi"),
                            ("narok", "Narok"),
                            ("nyamira", "Nyamira"),
                            ("nyandarua", "Nyandarua"),
                            ("nyeri", "Nyeri"),
                            ("samburu", "Samburu"),
                            ("siaya", "Siaya"),
                            ("taita_taveta", "Taita Taveta"),
                            ("tana_river", "Tana River"),
                            ("tharaka_nithi", "Tharaka Nithi"),
                            ("trans_nzoia", "Trans Nzoia"),
                            ("turkana", "Turkana"),
                            ("uasin_gishu", "Uasin Gishu"),
                            ("vihiga", "Vihiga"),
                            ("wajir", "Wajir"),
                            ("west_pokot", "West Pokot"),
                        ],
                        help_text="Kenyan county name",
                        max_length=50,
                        unique=True,
                    ),
                ),
                (
                    "code",
                    models.CharField(
                        help_text="County code (e.g., 001 for Mombasa)",
                        max_length=10,
                        unique=True,
                    ),
                ),
                (
                    "population",
                    models.PositiveIntegerField(
                        blank=True, help_text="County population", null=True
                    ),
                ),
                (
                    "area_sq_km",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="County area in square kilometers",
                        max_digits=10,
                        null=True,
                    ),
                ),
                (
                    "capital_city",
                    models.CharField(
                        help_text="County capital/headquarters", max_length=100
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "County",
                "verbose_name_plural": "Counties",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="Application",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "application_id",
                    models.UUIDField(default=uuid.uuid4, editable=False, unique=True),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("draft", "Draft"),
                            ("submitted", "Submitted"),
                            ("under_review", "Under Review"),
                            ("shortlisted", "Shortlisted"),
                            ("interview_scheduled", "Interview Scheduled"),
                            ("interview_completed", "Interview Completed"),
                            ("approved", "Approved"),
                            ("rejected", "Rejected"),
                            ("waitlisted", "Waitlisted"),
                            ("withdrawn", "Withdrawn"),
                            ("expired", "Expired"),
                        ],
                        default="draft",
                        max_length=20,
                    ),
                ),
                ("submission_date", models.DateTimeField(blank=True, null=True)),
                ("last_modified_date", models.DateTimeField(auto_now=True)),
                (
                    "personal_statement",
                    models.TextField(help_text="Student's personal statement/essay"),
                ),
                (
                    "motivation_letter",
                    models.TextField(
                        blank=True,
                        help_text="Why student is applying for this scholarship",
                    ),
                ),
                (
                    "career_goals",
                    models.TextField(
                        blank=True, help_text="Student's career goals and aspirations"
                    ),
                ),
                (
                    "additional_info",
                    models.JSONField(
                        default=dict,
                        help_text="Additional application-specific information",
                    ),
                ),
                (
                    "special_circumstances",
                    models.TextField(
                        blank=True, help_text="Any special circumstances or challenges"
                    ),
                ),
                (
                    "reference_contacts",
                    models.JSONField(
                        default=list,
                        help_text="List of reference contacts (name, title, phone, email)",
                    ),
                ),
                (
                    "supporting_documents",
                    models.JSONField(
                        default=list, help_text="List of uploaded supporting documents"
                    ),
                ),
                (
                    "current_gpa",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=4,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(4.0),
                        ],
                    ),
                ),
                (
                    "current_percentage",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=5,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "interview_status",
                    models.CharField(
                        choices=[
                            ("not_required", "Not Required"),
                            ("scheduled", "Scheduled"),
                            ("completed", "Completed"),
                            ("missed", "Missed"),
                            ("rescheduled", "Rescheduled"),
                        ],
                        default="not_required",
                        max_length=20,
                    ),
                ),
                ("interview_date", models.DateTimeField(blank=True, null=True)),
                ("interview_location", models.CharField(blank=True, max_length=200)),
                ("interview_notes", models.TextField(blank=True)),
                (
                    "interview_score",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=5,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "evaluation_score",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Overall evaluation score",
                        max_digits=5,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "evaluator_comments",
                    models.TextField(blank=True, help_text="Comments from evaluators"),
                ),
                (
                    "evaluation_criteria_scores",
                    models.JSONField(
                        default=dict,
                        help_text="Scores for individual evaluation criteria",
                    ),
                ),
                ("decision_date", models.DateTimeField(blank=True, null=True)),
                (
                    "decision_comments",
                    models.TextField(
                        blank=True, help_text="Comments about the decision"
                    ),
                ),
                (
                    "award_amount",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Awarded amount in KES",
                        max_digits=12,
                        null=True,
                    ),
                ),
                (
                    "award_duration_months",
                    models.PositiveIntegerField(
                        blank=True, help_text="Duration of award in months", null=True
                    ),
                ),
                ("award_start_date", models.DateField(blank=True, null=True)),
                ("award_end_date", models.DateField(blank=True, null=True)),
                (
                    "disbursement_schedule",
                    models.JSONField(
                        default=list, help_text="Schedule of disbursements"
                    ),
                ),
                (
                    "total_disbursed",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        help_text="Total amount disbursed so far",
                        max_digits=12,
                    ),
                ),
                (
                    "communication_log",
                    models.JSONField(
                        default=list, help_text="Log of communications with the student"
                    ),
                ),
                (
                    "compliance_status",
                    models.CharField(
                        choices=[
                            ("compliant", "Compliant"),
                            ("warning", "Warning"),
                            ("non_compliant", "Non-Compliant"),
                            ("under_review", "Under Review"),
                        ],
                        default="compliant",
                        max_length=20,
                    ),
                ),
                (
                    "monitoring_notes",
                    models.TextField(
                        blank=True, help_text="Notes from monitoring activities"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "decision_made_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="scholarship_decisions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Application",
                "verbose_name_plural": "Applications",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="Disbursement",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "disbursement_id",
                    models.UUIDField(default=uuid.uuid4, editable=False, unique=True),
                ),
                (
                    "amount",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Disbursement amount in KES",
                        max_digits=12,
                    ),
                ),
                ("disbursement_date", models.DateField()),
                (
                    "method",
                    models.CharField(
                        choices=[
                            ("bank_transfer", "Bank Transfer"),
                            ("mobile_money", "Mobile Money"),
                            ("cheque", "Cheque"),
                            ("cash", "Cash"),
                            ("direct_payment", "Direct Payment to Institution"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("processed", "Processed"),
                            ("completed", "Completed"),
                            ("failed", "Failed"),
                            ("cancelled", "Cancelled"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                (
                    "reference_number",
                    models.CharField(
                        blank=True,
                        help_text="Transaction reference number",
                        max_length=100,
                    ),
                ),
                (
                    "recipient_details",
                    models.JSONField(
                        default=dict,
                        help_text="Recipient details (bank account, mobile number, etc.)",
                    ),
                ),
                ("notes", models.TextField(blank=True)),
                ("processed_date", models.DateTimeField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "application",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="disbursements",
                        to="scholarships.application",
                    ),
                ),
                (
                    "processed_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="processed_disbursements",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Disbursement",
                "verbose_name_plural": "Disbursements",
                "ordering": ["-disbursement_date"],
            },
        ),
        migrations.CreateModel(
            name="Document",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "document_type",
                    models.CharField(
                        choices=[
                            ("academic_transcript", "Academic Transcript"),
                            ("birth_certificate", "Birth Certificate"),
                            ("national_id", "National ID Copy"),
                            ("passport_photo", "Passport Photo"),
                            ("recommendation_letter", "Recommendation Letter"),
                            ("financial_statement", "Financial Statement"),
                            ("bank_statement", "Bank Statement"),
                            ("admission_letter", "Admission Letter"),
                            ("fee_structure", "Fee Structure"),
                            ("disability_certificate", "Disability Certificate"),
                            (
                                "death_certificate",
                                "Death Certificate (Parent/Guardian)",
                            ),
                            ("affidavit", "Affidavit"),
                            ("other", "Other"),
                        ],
                        max_length=30,
                    ),
                ),
                (
                    "file",
                    models.FileField(
                        help_text="Upload document file",
                        upload_to="application_documents/",
                    ),
                ),
                ("original_filename", models.CharField(max_length=255)),
                (
                    "file_size",
                    models.PositiveIntegerField(help_text="File size in bytes"),
                ),
                ("description", models.CharField(blank=True, max_length=300)),
                ("is_verified", models.BooleanField(default=False)),
                ("verification_date", models.DateTimeField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "application",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="documents",
                        to="scholarships.application",
                    ),
                ),
                (
                    "verified_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="verified_documents",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Document",
                "verbose_name_plural": "Documents",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="Provider",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=200, unique=True)),
                ("slug", models.SlugField(max_length=220, unique=True)),
                (
                    "provider_type",
                    models.CharField(
                        choices=[
                            ("government", "Government"),
                            ("ngo", "Non-Governmental Organization"),
                            ("private_company", "Private Company"),
                            ("foundation", "Foundation"),
                            ("international", "International Organization"),
                            ("religious", "Religious Organization"),
                            ("educational", "Educational Institution"),
                            ("individual", "Individual Donor"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "funding_source",
                    models.CharField(
                        choices=[
                            ("government", "Government Funded"),
                            ("private", "Private Funded"),
                            ("donor", "Donor Funded"),
                            ("mixed", "Mixed Funding"),
                            ("endowment", "Endowment Fund"),
                        ],
                        max_length=20,
                    ),
                ),
                ("email", models.EmailField(max_length=254)),
                (
                    "phone_number",
                    models.CharField(
                        max_length=15,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Phone number must be in format +254XXXXXXXXX",
                                regex="^\\+?254[0-9]{9}$",
                            )
                        ],
                    ),
                ),
                ("website", models.URLField(blank=True)),
                ("physical_address", models.TextField()),
                ("postal_address", models.TextField(blank=True)),
                (
                    "description",
                    models.TextField(help_text="Brief description of the organization"),
                ),
                ("mission_statement", models.TextField(blank=True)),
                (
                    "established_date",
                    models.DateField(
                        blank=True,
                        help_text="Date when organization was established",
                        null=True,
                    ),
                ),
                (
                    "registration_number",
                    models.CharField(
                        blank=True,
                        help_text="Official registration number",
                        max_length=100,
                    ),
                ),
                (
                    "total_annual_budget",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Total annual budget in KES",
                        max_digits=15,
                        null=True,
                    ),
                ),
                (
                    "scholarship_budget_annual",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Annual scholarship budget in KES",
                        max_digits=15,
                        null=True,
                    ),
                ),
                (
                    "logo",
                    models.ImageField(
                        blank=True, null=True, upload_to="provider_logos/"
                    ),
                ),
                ("is_verified", models.BooleanField(default=False)),
                ("is_active", models.BooleanField(default=True)),
                ("verification_date", models.DateTimeField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "county",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="scholarship_providers",
                        to="scholarships.county",
                    ),
                ),
            ],
            options={
                "verbose_name": "Provider",
                "verbose_name_plural": "Providers",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="Scholarship",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=300)),
                ("slug", models.SlugField(max_length=350, unique=True)),
                (
                    "scholarship_type",
                    models.CharField(
                        choices=[
                            ("merit", "Merit-based"),
                            ("need", "Need-based"),
                            ("merit_need", "Merit and Need-based"),
                            ("research", "Research"),
                            ("athletic", "Athletic"),
                            ("artistic", "Arts/Creative"),
                            ("minority", "Minority/Diversity"),
                            ("regional", "Regional/County-specific"),
                            ("professional", "Professional Development"),
                            ("emergency", "Emergency/Hardship"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        help_text="Detailed description of the scholarship"
                    ),
                ),
                (
                    "eligibility_criteria",
                    models.JSONField(
                        default=dict,
                        help_text="JSON object containing eligibility criteria",
                    ),
                ),
                (
                    "required_documents",
                    models.JSONField(
                        default=list, help_text="List of required documents"
                    ),
                ),
                (
                    "target_education_levels",
                    models.JSONField(
                        default=list,
                        help_text="List of education levels this scholarship targets",
                    ),
                ),
                (
                    "target_fields_of_study",
                    models.JSONField(
                        default=list, help_text="List of fields of study/courses"
                    ),
                ),
                (
                    "coverage_type",
                    models.CharField(
                        choices=[
                            ("full", "Full Coverage"),
                            ("partial", "Partial Coverage"),
                            ("tuition_only", "Tuition Only"),
                            ("living_expenses", "Living Expenses Only"),
                            ("books_supplies", "Books and Supplies"),
                            ("emergency_fund", "Emergency Fund"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "amount_per_beneficiary",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Amount per beneficiary in KES",
                        max_digits=12,
                    ),
                ),
                (
                    "total_budget",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Total scholarship budget in KES",
                        max_digits=15,
                    ),
                ),
                (
                    "number_of_awards",
                    models.PositiveIntegerField(
                        help_text="Number of scholarships available"
                    ),
                ),
                (
                    "renewable",
                    models.BooleanField(
                        default=False, help_text="Can scholarship be renewed?"
                    ),
                ),
                (
                    "renewal_criteria",
                    models.TextField(
                        blank=True, help_text="Criteria for scholarship renewal"
                    ),
                ),
                ("application_start_date", models.DateTimeField()),
                ("application_deadline", models.DateTimeField()),
                ("selection_start_date", models.DateTimeField(blank=True, null=True)),
                ("selection_end_date", models.DateTimeField(blank=True, null=True)),
                (
                    "award_notification_date",
                    models.DateTimeField(blank=True, null=True),
                ),
                (
                    "disbursement_start_date",
                    models.DateTimeField(blank=True, null=True),
                ),
                (
                    "minimum_gpa",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=4,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(4.0),
                        ],
                    ),
                ),
                (
                    "minimum_percentage",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=5,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "maximum_family_income",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Maximum annual family income in KES",
                        max_digits=12,
                        null=True,
                    ),
                ),
                ("minimum_age", models.PositiveIntegerField(blank=True, null=True)),
                ("maximum_age", models.PositiveIntegerField(blank=True, null=True)),
                ("for_orphans_only", models.BooleanField(default=False)),
                ("for_disabled_only", models.BooleanField(default=False)),
                ("for_females_only", models.BooleanField(default=False)),
                ("for_males_only", models.BooleanField(default=False)),
                ("requires_community_service", models.BooleanField(default=False)),
                (
                    "community_service_hours",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Required community service hours",
                        null=True,
                    ),
                ),
                (
                    "application_method",
                    models.CharField(
                        choices=[
                            ("online", "Online Application"),
                            ("offline", "Offline Application"),
                            ("both", "Online and Offline"),
                        ],
                        default="online",
                        max_length=20,
                    ),
                ),
                (
                    "external_application_url",
                    models.URLField(
                        blank=True,
                        help_text="External application URL if not using internal system",
                    ),
                ),
                ("contact_person", models.CharField(blank=True, max_length=200)),
                ("contact_email", models.EmailField(blank=True, max_length=254)),
                (
                    "contact_phone",
                    models.CharField(
                        blank=True,
                        max_length=15,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Phone number must be in format +254XXXXXXXXX",
                                regex="^\\+?254[0-9]{9}$",
                            )
                        ],
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("draft", "Draft"),
                            ("active", "Active"),
                            ("paused", "Paused"),
                            ("closed", "Closed"),
                            ("expired", "Expired"),
                            ("cancelled", "Cancelled"),
                        ],
                        default="draft",
                        max_length=20,
                    ),
                ),
                ("is_featured", models.BooleanField(default=False)),
                ("view_count", models.PositiveIntegerField(default=0)),
                ("application_count", models.PositiveIntegerField(default=0)),
                (
                    "tags",
                    models.JSONField(
                        default=list, help_text="Tags for better searchability"
                    ),
                ),
                (
                    "meta_description",
                    models.CharField(
                        blank=True, help_text="SEO meta description", max_length=160
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="created_scholarships",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "provider",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="scholarships",
                        to="scholarships.provider",
                    ),
                ),
                (
                    "target_counties",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Counties this scholarship targets (empty = all counties)",
                        related_name="targeted_scholarships",
                        to="scholarships.county",
                    ),
                ),
            ],
            options={
                "verbose_name": "Scholarship",
                "verbose_name_plural": "Scholarships",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="Notification",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "notification_type",
                    models.CharField(
                        choices=[
                            ("application_submitted", "Application Submitted"),
                            ("application_approved", "Application Approved"),
                            ("application_rejected", "Application Rejected"),
                            ("interview_scheduled", "Interview Scheduled"),
                            ("disbursement_processed", "Disbursement Processed"),
                            ("deadline_reminder", "Deadline Reminder"),
                            ("document_required", "Document Required"),
                            ("scholarship_opportunity", "New Scholarship Opportunity"),
                            ("system_update", "System Update"),
                        ],
                        max_length=30,
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("message", models.TextField()),
                ("is_read", models.BooleanField(default=False)),
                ("action_url", models.URLField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("read_at", models.DateTimeField(blank=True, null=True)),
                (
                    "recipient",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="notifications",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "related_application",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="notifications",
                        to="scholarships.application",
                    ),
                ),
                (
                    "related_scholarship",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="notifications",
                        to="scholarships.scholarship",
                    ),
                ),
            ],
            options={
                "verbose_name": "Notification",
                "verbose_name_plural": "Notifications",
                "ordering": ["-created_at"],
            },
        ),
        migrations.AddField(
            model_name="application",
            name="scholarship",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="applications",
                to="scholarships.scholarship",
            ),
        ),
        migrations.CreateModel(
            name="Student",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "student_id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Unique student identifier",
                        unique=True,
                    ),
                ),
                ("first_name", models.CharField(max_length=100)),
                ("last_name", models.CharField(max_length=100)),
                ("other_names", models.CharField(blank=True, max_length=100)),
                ("date_of_birth", models.DateField()),
                (
                    "gender",
                    models.CharField(
                        choices=[("M", "Male"), ("F", "Female"), ("O", "Other")],
                        max_length=1,
                    ),
                ),
                (
                    "national_id",
                    models.CharField(
                        help_text="Kenyan National ID number",
                        max_length=20,
                        unique=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="National ID must be 8 digits", regex="^\\d{8}$"
                            )
                        ],
                    ),
                ),
                (
                    "phone_number",
                    models.CharField(
                        max_length=15,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Phone number must be in format +254XXXXXXXXX",
                                regex="^\\+?254[0-9]{9}$",
                            )
                        ],
                    ),
                ),
                ("email", models.EmailField(max_length=254)),
                (
                    "alternative_phone",
                    models.CharField(
                        blank=True,
                        max_length=15,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Phone number must be in format +254XXXXXXXXX",
                                regex="^\\+?254[0-9]{9}$",
                            )
                        ],
                    ),
                ),
                ("sub_county", models.CharField(max_length=100)),
                ("ward", models.CharField(max_length=100)),
                ("location", models.CharField(blank=True, max_length=100)),
                ("postal_address", models.TextField(blank=True)),
                (
                    "current_education_level",
                    models.CharField(
                        choices=[
                            ("primary", "Primary School"),
                            ("secondary", "Secondary School"),
                            ("certificate", "Certificate"),
                            ("diploma", "Diploma"),
                            ("undergraduate", "Undergraduate"),
                            ("postgraduate", "Postgraduate"),
                            ("phd", "PhD"),
                        ],
                        max_length=20,
                    ),
                ),
                ("current_institution", models.CharField(max_length=200)),
                ("course_of_study", models.CharField(max_length=200)),
                (
                    "year_of_study",
                    models.PositiveIntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(10),
                        ]
                    ),
                ),
                ("expected_graduation_year", models.PositiveIntegerField()),
                (
                    "previous_gpa",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="GPA on a 4.0 scale",
                        max_digits=4,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(4.0),
                        ],
                    ),
                ),
                (
                    "previous_percentage",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Percentage score",
                        max_digits=5,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "family_income_annual",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Annual family income in KES",
                        max_digits=12,
                    ),
                ),
                ("number_of_dependents", models.PositiveIntegerField(default=0)),
                (
                    "disability_status",
                    models.CharField(
                        choices=[
                            ("none", "No Disability"),
                            ("physical", "Physical Disability"),
                            ("visual", "Visual Impairment"),
                            ("hearing", "Hearing Impairment"),
                            ("intellectual", "Intellectual Disability"),
                            ("multiple", "Multiple Disabilities"),
                        ],
                        default="none",
                        max_length=20,
                    ),
                ),
                ("is_orphan", models.BooleanField(default=False)),
                ("is_single_parent_child", models.BooleanField(default=False)),
                ("is_child_headed_household", models.BooleanField(default=False)),
                (
                    "profile_photo",
                    models.ImageField(
                        blank=True, null=True, upload_to="student_photos/"
                    ),
                ),
                ("is_verified", models.BooleanField(default=False)),
                ("verification_date", models.DateTimeField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "county",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="students",
                        to="scholarships.county",
                    ),
                ),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="student_profile",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Student",
                "verbose_name_plural": "Students",
                "ordering": ["-created_at"],
            },
        ),
        migrations.AddField(
            model_name="application",
            name="student",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="applications",
                to="scholarships.student",
            ),
        ),
        migrations.CreateModel(
            name="AuditLog",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "action",
                    models.CharField(
                        choices=[
                            ("create", "Create"),
                            ("update", "Update"),
                            ("delete", "Delete"),
                            ("view", "View"),
                            ("login", "Login"),
                            ("logout", "Logout"),
                            ("export", "Export"),
                            ("import", "Import"),
                        ],
                        max_length=20,
                    ),
                ),
                ("model_name", models.CharField(max_length=100)),
                ("object_id", models.CharField(blank=True, max_length=100)),
                ("object_repr", models.CharField(blank=True, max_length=200)),
                (
                    "changes",
                    models.JSONField(
                        default=dict, help_text="JSON object of changes made"
                    ),
                ),
                ("ip_address", models.GenericIPAddressField(blank=True, null=True)),
                ("user_agent", models.TextField(blank=True)),
                ("timestamp", models.DateTimeField(auto_now_add=True)),
                (
                    "user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="audit_logs",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Audit Log",
                "verbose_name_plural": "Audit Logs",
                "ordering": ["-timestamp"],
                "indexes": [
                    models.Index(
                        fields=["user", "timestamp"],
                        name="scholarship_user_id_699872_idx",
                    ),
                    models.Index(
                        fields=["action", "timestamp"],
                        name="scholarship_action_30109f_idx",
                    ),
                    models.Index(
                        fields=["model_name", "timestamp"],
                        name="scholarship_model_n_74333d_idx",
                    ),
                ],
            },
        ),
        migrations.AddIndex(
            model_name="scholarship",
            index=models.Index(
                fields=["status", "application_deadline"],
                name="scholarship_status_3a431a_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="scholarship",
            index=models.Index(
                fields=["scholarship_type"], name="scholarship_scholar_f15acd_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="scholarship",
            index=models.Index(
                fields=["provider"], name="scholarship_provide_5ce431_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="application",
            index=models.Index(
                fields=["status", "submission_date"],
                name="scholarship_status_0a1445_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="application",
            index=models.Index(
                fields=["scholarship", "status"], name="scholarship_scholar_88773a_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="application",
            index=models.Index(
                fields=["student"], name="scholarship_student_c70291_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="application",
            unique_together={("student", "scholarship")},
        ),
    ]
